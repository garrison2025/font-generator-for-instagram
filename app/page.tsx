"use client"

import { useState, useEffect, useMemo, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Copy, Heart, Eye, Shuffle, Search, Filter, Zap } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { InstagramPreviewModal } from "@/components/instagram-preview-modal"
import Link from "next/link"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

// Font styles with categories
const fontStyles = [
  // Eleganti (15 fonts)
  {
    name: "Corsivo Elegante",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const elegantMap: { [key: string]: string } = {
          a: "ùí∂",
          b: "ùí∑",
          c: "ùí∏",
          d: "ùíπ",
          e: "‚ÑØ",
          f: "ùíª",
          g: "‚Ñä",
          h: "‚Ñé",
          i: "ùíæ",
          j: "ùíø",
          k: "ùìÄ",
          l: "ùìÅ",
          m: "ùìÇ",
          n: "ùìÉ",
          o: "‚Ñ¥",
          p: "ùìÖ",
          q: "ùìÜ",
          r: "ùìá",
          s: "ùìà",
          t: "ùìâ",
          u: "ùìä",
          v: "ùìã",
          w: "ùìå",
          x: "ùìç",
          y: "ùìé",
          z: "ùìè",
          A: "ùíú",
          B: "‚Ñ¨",
          C: "ùíû",
          D: "ùíü",
          E: "‚Ñ∞",
          F: "‚Ñ±",
          G: "ùí¢",
          H: "‚Ñã",
          I: "‚Ñê",
          J: "ùí•",
          K: "ùí¶",
          L: "‚Ñí",
          M: "‚Ñ≥",
          N: "ùí©",
          O: "ùí™",
          P: "ùí´",
          Q: "ùí¨",
          R: "‚Ñõ",
          S: "ùíÆ",
          T: "ùíØ",
          U: "ùí∞",
          V: "ùí±",
          W: "ùí≤",
          X: "ùí≥",
          Y: "ùí¥",
          Z: "ùíµ",
        }
        return elegantMap[char] || char
      }),
  },
  {
    name: "Grassetto Elegante",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const boldMap: { [key: string]: string } = {
          a: "ùêö",
          b: "ùêõ",
          c: "ùêú",
          d: "ùêù",
          e: "ùêû",
          f: "ùêü",
          g: "ùê†",
          h: "ùê°",
          i: "ùê¢",
          j: "ùê£",
          k: "ùê§",
          l: "ùê•",
          m: "ùê¶",
          n: "ùêß",
          o: "ùê®",
          p: "ùê©",
          q: "ùê™",
          r: "ùê´",
          s: "ùê¨",
          t: "ùê≠",
          u: "ùêÆ",
          v: "ùêØ",
          w: "ùê∞",
          x: "ùê±",
          y: "ùê≤",
          z: "ùê≥",
          A: "ùêÄ",
          B: "ùêÅ",
          C: "ùêÇ",
          D: "ùêÉ",
          E: "ùêÑ",
          F: "ùêÖ",
          G: "ùêÜ",
          H: "ùêá",
          I: "ùêà",
          J: "ùêâ",
          K: "ùêä",
          L: "ùêã",
          M: "ùêå",
          N: "ùêç",
          O: "ùêé",
          P: "ùêè",
          Q: "ùêê",
          R: "ùêë",
          S: "ùêí",
          T: "ùêì",
          U: "ùêî",
          V: "ùêï",
          W: "ùêñ",
          X: "ùêó",
          Y: "ùíÄ",
          Z: "ùíÅ",
        }
        return boldMap[char] || char
      }),
  },
  {
    name: "Corsivo Grassetto",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const boldItalicMap: { [key: string]: string } = {
          a: "ùíÇ",
          b: "ùíÉ",
          c: "ùíÑ",
          d: "ùíÖ",
          e: "ùíÜ",
          f: "ùíá",
          g: "ùíà",
          h: "ùíâ",
          i: "ùíä",
          j: "ùíã",
          k: "ùíå",
          l: "ùíç",
          m: "ùíé",
          n: "ùíè",
          o: "ùíê",
          p: "ùíë",
          q: "ùíí",
          r: "ùíì",
          s: "ùíî",
          t: "ùíï",
          u: "ùíñ",
          v: "ùíó",
          w: "ùíò",
          x: "ùíô",
          y: "ùíö",
          z: "ùíõ",
          A: "ùë®",
          B: "ùë©",
          C: "ùë™",
          D: "ùë´",
          E: "ùë¨",
          F: "ùë≠",
          G: "ùëÆ",
          H: "ùëØ",
          I: "ùë∞",
          J: "ùë±",
          K: "ùë≤",
          L: "ùë≥",
          M: "ùë¥",
          N: "ùëµ",
          O: "ùë∂",
          P: "ùë∑",
          Q: "ùë∏",
          R: "ùëπ",
          S: "ùë∫",
          T: "ùëª",
          U: "ùëº",
          V: "ùëΩ",
          W: "ùëæ",
          X: "ùëø",
          Y: "ùíÄ",
          Z: "ùíÅ",
        }
        return boldItalicMap[char] || char
      }),
  },
  {
    name: "Serif Elegante",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const serifMap: { [key: string]: string } = {
          a: "ùñ∫",
          b: "ùñª",
          c: "ùñº",
          d: "ùñΩ",
          e: "ùñæ",
          f: "ùñø",
          g: "ùóÄ",
          h: "ùóÅ",
          i: "ùóÇ",
          j: "ùóÉ",
          k: "ùóÑ",
          l: "ùóÖ",
          m: "ùóÜ",
          n: "ùóá",
          o: "ùóà",
          p: "ùóâ",
          q: "ùóä",
          r: "ùóã",
          s: "ùóå",
          t: "ùóç",
          u: "ùóé",
          v: "ùóè",
          w: "ùóê",
          x: "ùóë",
          y: "ùóí",
          z: "ùóì",
          A: "ùñ†",
          B: "ùñ°",
          C: "ùñ¢",
          D: "ùñ£",
          E: "ùñ§",
          F: "ùñ•",
          G: "ùñ¶",
          H: "ùñß",
          I: "ùñ®",
          J: "ùñ©",
          K: "ùñ™",
          L: "ùñ´",
          M: "ùñ¨",
          N: "ùñ≠",
          O: "ùñÆ",
          P: "ùñØ",
          Q: "ùñ∞",
          R: "ùñ±",
          S: "ùñ≤",
          T: "ùñ≥",
          U: "ùñ¥",
          V: "ùñµ",
          W: "ùñ∂",
          X: "ùñ∑",
          Y: "ùñ∏",
          Z: "ùñπ",
        }
        return serifMap[char] || char
      }),
  },
  {
    name: "Doppio Sottolineato",
    category: "eleganti",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u0333")
        .join(""),
  },
  {
    name: "Sottolineato Elegante",
    category: "eleganti",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u0332")
        .join(""),
  },
  {
    name: "Barrato Elegante",
    category: "eleganti",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u0336")
        .join(""),
  },
  {
    name: "Sopralineato",
    category: "eleganti",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u0305")
        .join(""),
  },
  {
    name: "Corsivo Matematico",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const mathItalicMap: { [key: string]: string } = {
          a: "ùëé",
          b: "ùëè",
          c: "ùëê",
          d: "ùëë",
          e: "ùëí",
          f: "ùëì",
          g: "ùëî",
          h: "‚Ñé",
          i: "ùëñ",
          j: "ùëó",
          k: "ùëò",
          l: "ùëô",
          m: "ùëö",
          n: "ùëõ",
          o: "ùëú",
          p: "ùëù",
          q: "ùëû",
          r: "ùëü",
          s: "ùë†",
          t: "ùë°",
          u: "ùë¢",
          v: "ùë£",
          w: "ùë§",
          x: "ùë•",
          y: "ùë¶",
          z: "ùëß",
          A: "ùê¥",
          B: "ùêµ",
          C: "ùê∂",
          D: "ùê∑",
          E: "ùê∏",
          F: "ùêπ",
          G: "ùê∫",
          H: "ùêª",
          I: "ùêº",
          J: "ùêΩ",
          K: "ùêæ",
          L: "ùêø",
          M: "ùëÄ",
          N: "ùëÅ",
          O: "ùëÇ",
          P: "ùëÉ",
          Q: "ùëÑ",
          R: "ùëÖ",
          S: "ùëÜ",
          T: "ùëá",
          U: "ùëà",
          V: "ùëâ",
          W: "ùëä",
          X: "ùëã",
          Y: "ùëå",
          Z: "ùëç",
        }
        return mathItalicMap[char] || char
      }),
  },
  {
    name: "Grassetto Matematico",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const mathBoldMap: { [key: string]: string } = {
          a: "ùêö",
          b: "ùêõ",
          c: "ùêú",
          d: "ùêù",
          e: "ùêû",
          f: "ùêü",
          g: "ùê†",
          h: "ùê°",
          i: "ùê¢",
          j: "ùê£",
          k: "ùê§",
          l: "ùê•",
          m: "ùê¶",
          n: "ùêß",
          o: "ùê®",
          p: "ùê©",
          q: "ùê™",
          r: "ùê´",
          s: "ùê¨",
          t: "ùê≠",
          u: "ùêÆ",
          v: "ùêØ",
          w: "ùê∞",
          x: "ùê±",
          y: "ùê≤",
          z: "ùê≥",
          A: "ùêÄ",
          B: "ùêÅ",
          C: "ùêÇ",
          D: "ùêÉ",
          E: "ùêÑ",
          F: "ùêÖ",
          G: "ùêÜ",
          H: "ùêá",
          I: "ùêà",
          J: "ùêâ",
          K: "ùêä",
          L: "ùêã",
          M: "ùêå",
          N: "ùêç",
          O: "ùêé",
          P: "ùêè",
          Q: "ùêê",
          R: "ùêë",
          S: "ùêí",
          T: "ùêì",
          U: "ùêî",
          V: "ùêï",
          W: "ùêñ",
          X: "ùêó",
          Y: "ùíÄ",
          Z: "ùíÅ",
        }
        return mathBoldMap[char] || char
      }),
  },
  {
    name: "Piccole Maiuscole",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const smallCapsMap: { [key: string]: string } = {
          a: "·¥Ä",
          b: " ô",
          c: "·¥Ñ",
          d: "·¥Ö",
          e: "·¥á",
          f: "“ì",
          g: "…¢",
          h: " ú",
          i: "…™",
          j: "·¥ä",
          k: "·¥ã",
          l: " ü",
          m: "·¥ç",
          n: "…¥",
          o: "·¥è",
          p: "·¥ò",
          q: "«´",
          r: " Ä",
          s: "s",
          t: "·¥õ",
          u: "·¥ú",
          v: "·¥†",
          w: "·¥°",
          x: "x",
          y: " è",
          z: "·¥¢",
          A: "·¥Ä",
          B: " ô",
          C: "·¥Ñ",
          D: "·¥Ö",
          E: "·¥á",
          F: "“ì",
          G: "…¢",
          H: " ú",
          I: "…™",
          J: "·¥ä",
          K: "·¥ã",
          L: " ü",
          M: "·¥ç",
          N: "…¥",
          O: "·¥è",
          P: "·¥ò",
          Q: "«´",
          R: " Ä",
          S: "s",
          T: "·¥õ",
          U: "·¥ú",
          V: "·¥†",
          W: "·¥°",
          X: "x",
          Y: " è",
          Z: "·¥¢",
        }
        return smallCapsMap[char] || char
      }),
  },
  {
    name: "Doppio Barrato",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const doubleStruckMap: { [key: string]: string } = {
          a: "ùïí",
          b: "ùïì",
          c: "ùïî",
          d: "ùïï",
          e: "ùïñ",
          f: "ùïó",
          g: "ùïò",
          h: "ùïô",
          i: "ùïö",
          j: "ùïõ",
          k: "ùïú",
          l: "ùïù",
          m: "ùïû",
          n: "ùïü",
          o: "ùï†",
          p: "ùï°",
          q: "ùï¢",
          r: "ùï£",
          s: "ùï§",
          t: "ùï•",
          u: "ùï¶",
          v: "ùïß",
          w: "ùï®",
          x: "ùï©",
          y: "ùï™",
          z: "ùï´",
          A: "ùî∏",
          B: "ùîπ",
          C: "‚ÑÇ",
          D: "ùîª",
          E: "ùîº",
          F: "ùîΩ",
          G: "ùîæ",
          H: "‚Ñç",
          I: "ùïÄ",
          J: "ùïÅ",
          K: "ùïÇ",
          L: "ùïÉ",
          M: "ùïÑ",
          N: "‚Ñï",
          O: "ùïÜ",
          P: "‚Ñô",
          Q: "‚Ñö",
          R: "‚Ñù",
          S: "ùïä",
          T: "ùïã",
          U: "ùïå",
          V: "ùïç",
          W: "ùïé",
          X: "ùïè",
          Y: "ùïê",
          Z: "‚Ñ§",
        }
        return doubleStruckMap[char] || char
      }),
  },
  {
    name: "Serif Corsivo",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const serifItalicMap: { [key: string]: string } = {
          a: "ùëé",
          b: "ùëè",
          c: "ùëê",
          d: "ùëë",
          e: "ùëí",
          f: "ùëì",
          g: "ùëî",
          h: "‚Ñé",
          i: "ùëñ",
          j: "ùëó",
          k: "ùëò",
          l: "ùëô",
          m: "ùëö",
          n: "ùëõ",
          o: "ùëú",
          p: "ùëù",
          q: "ùëû",
          r: "ùëü",
          s: "ùë†",
          t: "ùë°",
          u: "ùë¢",
          v: "ùë£",
          w: "ùë§",
          x: "ùë•",
          y: "ùë¶",
          z: "ùëß",
          A: "ùê¥",
          B: "ùêµ",
          C: "ùê∂",
          D: "ùê∑",
          E: "ùê∏",
          F: "ùêπ",
          G: "ùê∫",
          H: "ùêª",
          I: "ùêº",
          J: "ùêΩ",
          K: "ùêæ",
          L: "ùêø",
          M: "ùëÄ",
          N: "ùëÅ",
          O: "ùëÇ",
          P: "ùëÉ",
          Q: "ùëÑ",
          R: "ùëÖ",
          S: "ùëÜ",
          T: "ùëá",
          U: "ùëà",
          V: "ùëâ",
          W: "ùëä",
          X: "ùëã",
          Y: "ùëå",
          Z: "ùëç",
        }
        return serifItalicMap[char] || char
      }),
  },
  {
    name: "Serif Grassetto Corsivo",
    category: "eleganti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const serifBoldItalicMap: { [key: string]: string } = {
          a: "ùíÇ",
          b: "ùíÉ",
          c: "ùíÑ",
          d: "ùíÖ",
          e: "ùíÜ",
          f: "ùíá",
          g: "ùíà",
          h: "ùíâ",
          i: "ùíä",
          j: "ùíã",
          k: "ùíå",
          l: "ùíç",
          m: "ùíé",
          n: "ùíè",
          o: "ùíê",
          p: "ùíë",
          q: "ùíí",
          r: "ùíì",
          s: "ùíî",
          t: "ùíï",
          u: "ùíñ",
          v: "ùíó",
          w: "ùíò",
          x: "ùíô",
          y: "ùíö",
          z: "ùíõ",
          A: "ùë®",
          B: "ùë©",
          C: "ùë™",
          D: "ùë´",
          E: "ùë¨",
          F: "ùë≠",
          G: "ùëÆ",
          H: "ùëØ",
          I: "ùë∞",
          J: "ùë±",
          K: "ùë≤",
          L: "ùë≥",
          M: "ùë¥",
          N: "ùëµ",
          O: "ùë∂",
          P: "ùë∑",
          Q: "ùë∏",
          R: "ùëπ",
          S: "ùë∫",
          T: "ùëª",
          U: "ùëº",
          V: "ùëΩ",
          W: "ùëæ",
          X: "ùëø",
          Y: "ùíÄ",
          Z: "ùíÅ",
        }
        return serifBoldItalicMap[char] || char
      }),
  },

  // Moderni (15 fonts)
  {
    name: "Sans Serif",
    category: "moderni",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const sansMap: { [key: string]: string } = {
          a: "ùñ∫",
          b: "ùñª",
          c: "ùñº",
          d: "ùñΩ",
          e: "ùñæ",
          f: "ùñø",
          g: "ùóÄ",
          h: "ùóÅ",
          i: "ùóÇ",
          j: "ùóÉ",
          k: "ùóÑ",
          l: "ùóÖ",
          m: "ùóÜ",
          n: "ùóá",
          o: "ùóà",
          p: "ùóâ",
          q: "ùóä",
          r: "ùóã",
          s: "ùóå",
          t: "ùóç",
          u: "ùóé",
          v: "ùóè",
          w: "ùóê",
          x: "ùóë",
          y: "ùóí",
          z: "ùóì",
          A: "ùñ†",
          B: "ùñ°",
          C: "ùñ¢",
          D: "ùñ£",
          E: "ùñ§",
          F: "ùñ•",
          G: "ùñ¶",
          H: "ùñß",
          I: "ùñ®",
          J: "ùñ©",
          K: "ùñ™",
          L: "ùñ´",
          M: "ùñ¨",
          N: "ùñ≠",
          O: "ùñÆ",
          P: "ùñØ",
          Q: "ùñ∞",
          R: "ùñ±",
          S: "ùñ≤",
          T: "ùñ≥",
          U: "ùñ¥",
          V: "ùñµ",
          W: "ùñ∂",
          X: "ùñ∑",
          Y: "ùñ∏",
          Z: "ùñπ",
        }
        return sansMap[char] || char
      }),
  },
  {
    name: "Sans Serif Grassetto",
    category: "moderni",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const sansBoldMap: { [key: string]: string } = {
          a: "ùóÆ",
          b: "ùóØ",
          c: "ùó∞",
          d: "ùó±",
          e: "ùó≤",
          f: "ùó≥",
          g: "ùó¥",
          h: "ùóµ",
          i: "ùó∂",
          j: "ùó∑",
          k: "ùó∏",
          l: "ùóπ",
          m: "ùó∫",
          n: "ùóª",
          o: "ùóº",
          p: "ùóΩ",
          q: "ùóæ",
          r: "ùóø",
          s: "ùòÄ",
          t: "ùòÅ",
          u: "ùòÇ",
          v: "ùòÉ",
          w: "ùòÑ",
          x: "ùòÖ",
          y: "ùò∫",
          z: "ùòá",
          A: "ùóî",
          B: "ùóï",
          C: "ùóñ",
          D: "ùóó",
          E: "ùóò",
          F: "ùóô",
          G: "ùóö",
          H: "ùóõ",
          I: "ùóú",
          J: "ùóù",
          K: "ùóû",
          L: "ùóü",
          M: "ùó†",
          N: "ùó°",
          O: "ùó¢",
          P: "ùó£",
          Q: "ùó§",
          R: "ùó•",
          S: "ùó¶",
          T: "ùóß",
          U: "ùó®",
          V: "ùó©",
          W: "ùó™",
          X: "ùó´",
          Y: "ùó¨",
          Z: "ùó≠",
        }
        return sansBoldMap[char] || char
      }),
  },
  {
    name: "Sans Serif Corsivo",
    category: "moderni",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const sansItalicMap: { [key: string]: string } = {
          a: "ùò¢",
          b: "ùò£",
          c: "ùò§",
          d: "ùò•",
          e: "ùò¶",
          f: "ùòß",
          g: "ùò®",
          h: "ùò©",
          i: "ùò™",
          j: "ùò´",
          k: "ùò¨",
          l: "ùò≠",
          m: "ùòÆ",
          n: "ùòØ",
          o: "ùò∞",
          p: "ùò±",
          q: "ùò≤",
          r: "ùò≥",
          s: "ùò¥",
          t: "ùòµ",
          u: "ùò∂",
          v: "ùò∑",
          w: "ùò∏",
          x: "ùòπ",
          y: "ùò∫",
          z: "ùòª",
          A: "ùòà",
          B: "ùòâ",
          C: "ùòä",
          D: "ùòã",
          E: "ùòå",
          F: "ùòç",
          G: "ùòé",
          H: "ùòè",
          I: "ùòê",
          J: "ùòë",
          K: "ùòí",
          L: "ùòì",
          M: "ùòî",
          N: "ùòï",
          O: "ùòñ",
          P: "ùòó",
          Q: "ùòò",
          R: "ùòô",
          S: "ùòö",
          T: "ùòõ",
          U: "ùòú",
          V: "ùòù",
          W: "ùòû",
          X: "ùòü",
          Y: "ùò†",
          Z: "ùò°",
        }
        return sansItalicMap[char] || char
      }),
  },
  {
    name: "Sans Serif Grassetto Corsivo",
    category: "moderni",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const sansBoldItalicMap: { [key: string]: string } = {
          a: "ùôñ",
          b: "ùôó",
          c: "ùôò",
          d: "ùôô",
          e: "ùôö",
          f: "ùôõ",
          g: "ùôú",
          h: "ùôù",
          i: "ùôû",
          j: "ùôü",
          k: "ùô†",
          l: "ùô°",
          m: "ùô¢",
          n: "ùô£",
          o: "ùô§",
          p: "ùô•",
          q: "ùô¶",
          r: "ùôß",
          s: "ùô®",
          t: "ùô©",
          u: "ùô™",
          v: "ùô´",
          w: "ùô¨",
          x: "ùô≠",
          y: "ùôÆ",
          z: "ùôØ",
          A: "ùòº",
          B: "ùòΩ",
          C: "ùòæ",
          D: "ùòø",
          E: "ùôÄ",
          F: "ùôÅ",
          G: "ùôÇ",
          H: "ùôÉ",
          I: "ùôÑ",
          J: "ùôÖ",
          K: "ùôÜ",
          L: "ùôá",
          M: "ùôà",
          N: "ùôâ",
          O: "ùôä",
          P: "ùôã",
          Q: "ùôå",
          R: "ùôç",
          S: "ùôé",
          T: "ùôè",
          U: "ùöÑ",
          V: "ùôë",
          W: "ùôí",
          X: "ùôì",
          Y: "ùöà",
          Z: "ùôï",
        }
        return sansBoldItalicMap[char] || char
      }),
  },
  {
    name: "Monospace",
    category: "moderni",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const monoMap: { [key: string]: string } = {
          a: "ùöä",
          b: "ùöã",
          c: "ùöå",
          d: "ùöç",
          e: "ùöé",
          f: "ùöè",
          g: "ùöê",
          h: "ùöë",
          i: "ùöí",
          j: "ùöì",
          k: "ùöî",
          l: "ùöï",
          m: "ùöñ",
          n: "ùöó",
          o: "ùöò",
          p: "ùöô",
          q: "ùöö",
          r: "ùöõ",
          s: "ùöú",
          t: "ùöù",
          u: "ùöû",
          v: "ùöü",
          w: "ùö†",
          x: "ùö°",
          y: "ùö¢",
          z: "ùö£",
          A: "ùô∞",
          B: "ùô±",
          C: "ùô≤",
          D: "ùô≥",
          E: "ùô¥",
          F: "ùôµ",
          G: "ùô∂",
          H: "ùô∑",
          I: "ùô∏",
          J: "ùôπ",
          K: "ùô∫",
          L: "ùôª",
          M: "ùôº",
          N: "ùôΩ",
          O: "ùôæ",
          P: "ùôø",
          Q: "ùöÄ",
          R: "ùöÅ",
          S: "ùöÇ",
          T: "ùöÉ",
          U: "ùöÑ",
          V: "ùöÖ",
          W: "ùöÜ",
          X: "ùöá",
          Y: "ùöà",
          Z: "ùöâ",
        }
        return monoMap[char] || char
      }),
  },
  {
    name: "Fullwidth",
    category: "moderni",
    transform: (text: string) =>
      text.replace(/[a-zA-Z0-9]/g, (char) => {
        const fullwidthMap: { [key: string]: string } = {
          a: "ÔΩÅ",
          b: "ÔΩÇ",
          c: "ÔΩÉ",
          d: "ÔΩÑ",
          e: "ÔΩÖ",
          f: "ÔΩÜ",
          g: "ÔΩá",
          h: "ÔΩà",
          i: "ÔΩâ",
          j: "ÔΩä",
          k: "ÔΩã",
          l: "ÔΩå",
          m: "ÔΩç",
          n: "ÔΩé",
          o: "ÔΩè",
          p: "ÔΩê",
          q: "ÔΩë",
          r: "ÔΩí",
          s: "ÔΩì",
          t: "ÔΩî",
          u: "ÔΩï",
          v: "ÔΩñ",
          w: "ùö†",
          x: "ÔΩò",
          y: "ùôÆ",
          z: "ùö£",
          A: "Ôº°",
          B: "Ôº¢",
          C: "Ôº£",
          D: "Ôº§",
          E: "Ôº•",
          F: "Ôº¶",
          G: "Ôºß",
          H: "Ôº®",
          I: "Ôº©",
          J: "Ôº™",
          K: "Ôº´",
          L: "Ôº¨",
          M: "Ôº≠",
          N: "ÔºÆ",
          O: "ÔºØ",
          P: "Ôº∞",
          Q: "Ôº±",
          R: "Ôº≤",
          S: "Ôº≥",
          T: "Ôº¥",
          U: "Ôºµ",
          V: "Ôº∂",
          W: "ùïé",
          X: "ùïè",
          Y: "ùöà",
          Z: "Ôº∫",
          "0": "Ôºê",
          "1": "Ôºë",
          "2": "Ôºí",
          "3": "Ôºì",
          "4": "Ôºî",
          "5": "Ôºï",
          "6": "Ôºñ",
          "7": "Ôºó",
          "8": "Ôºò",
          "9": "Ôºô",
        }
        return fullwidthMap[char] || char
      }),
  },
  {
    name: "Minimalista",
    category: "moderni",
    transform: (text: string) => text.toLowerCase().replace(/\s+/g, ""),
  },
  {
    name: "Spazi Minimi",
    category: "moderni",
    transform: (text: string) => text.replace(/\s+/g, "¬∑"),
  },
  {
    name: "Punti Separatori",
    category: "moderni",
    transform: (text: string) => text.split("").join("‚Ä¢"),
  },
  {
    name: "Linee Verticali",
    category: "moderni",
    transform: (text: string) => text.split("").join("|"),
  },
  {
    name: "Trattini",
    category: "moderni",
    transform: (text: string) => text.split("").join("-"),
  },
  {
    name: "Underscore",
    category: "moderni",
    transform: (text: string) => text.split("").join("_"),
  },
  {
    name: "Maiuscolo Moderno",
    category: "moderni",
    transform: (text: string) => text.toUpperCase(),
  },
  {
    name: "Minuscolo Moderno",
    category: "moderni",
    transform: (text: string) => text.toLowerCase(),
  },
  {
    name: "Alternato",
    category: "moderni",
    transform: (text: string) =>
      text
        .split("")
        .map((char, i) => (i % 2 === 0 ? char.toUpperCase() : char.toLowerCase()))
        .join(""),
  },

  // Divertenti (15 fonts)
  {
    name: "Bubble",
    category: "divertenti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const bubbleMap: { [key: string]: string } = {
          a: "‚ìê",
          b: "‚ìë",
          c: "‚ìí",
          d: "‚ìì",
          e: "‚ìî",
          f: "‚ìï",
          g: "‚ìñ",
          h: "‚ìó",
          i: "‚ìò",
          j: "‚ìô",
          k: "‚ìö",
          l: "‚ìõ",
          m: "‚ìú",
          n: "‚ìù",
          o: "‚ìû",
          p: "‚ìü",
          q: "‚ì†",
          r: "‚ì°",
          s: "‚ì¢",
          t: "‚ì£",
          u: "‚ì§",
          v: "‚ì•",
          w: "‚ì¶",
          x: "‚ìß",
          y: "‚ì®",
          z: "‚ì©",
          A: "‚í∂",
          B: "‚í∑",
          C: "‚í∏",
          D: "‚íπ",
          E: "‚í∫",
          F: "‚íª",
          G: "‚íº",
          H: "‚íΩ",
          I: "‚íæ",
          J: "‚íø",
          K: "‚ìÄ",
          L: "‚ìÅ",
          M: "üÑº",
          N: "üÑΩ",
          O: "üÑæ",
          P: "üÑø",
          Q: "üÖÄ",
          R: "üÖÅ",
          S: "üÖÇ",
          T: "üÖÉ",
          U: "üÖÑ",
          V: "üÖÖ",
          W: "üÖÜ",
          X: "üÖá",
          Y: "üÖà",
          Z: "üÖâ",
        }
        return bubbleMap[char] || char
      }),
  },
  {
    name: "Quadrato",
    category: "divertenti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const squareMap: { [key: string]: string } = {
          a: "üÑ∞",
          b: "üÑ±",
          c: "üÑ≤",
          d: "üÑ≥",
          e: "üÑ¥",
          f: "üÑµ",
          g: "üÑ∂",
          h: "üÑ∑",
          i: "üÑ∏",
          j: "üÑπ",
          k: "üÑ∫",
          l: "üÑª",
          m: "üÑº",
          n: "üÑΩ",
          o: "üÑæ",
          p: "üÑø",
          q: "üÖÄ",
          r: "üÖÅ",
          s: "üÖÇ",
          t: "üÖÉ",
          u: "üÖÑ",
          v: "üÖÖ",
          w: "üÖÜ",
          x: "üÖá",
          y: "üÖà",
          z: "üÖâ",
          A: "üÑ∞",
          B: "üÑ±",
          C: "üÑ≤",
          D: "üÑ≥",
          E: "üÑ¥",
          F: "üÑµ",
          G: "üÑ∂",
          H: "üÑ∑",
          I: "üÑ∏",
          J: "üÑπ",
          K: "üÑ∫",
          L: "üÑª",
          M: "üÑº",
          N: "üÑΩ",
          O: "üÑæ",
          P: "üÑø",
          Q: "üÖÄ",
          R: "üÖÅ",
          S: "üÖÇ",
          T: "üÖÉ",
          U: "üÖÑ",
          V: "üÖÖ",
          W: "üÖÜ",
          X: "üÖá",
          Y: "üÖà",
          Z: "üÖâ",
        }
        return squareMap[char] || char
      }),
  },
  {
    name: "Quadrato Nero",
    category: "divertenti",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const blackSquareMap: { [key: string]: string } = {
          a: "üÖ∞",
          b: "üÖ±",
          c: "üÖ≤",
          d: "üÖ≥",
          e: "üÖ¥",
          f: "üÖµ",
          g: "üÖ∂",
          h: "üÖ∑",
          i: "üÖ∏",
          j: "üÖπ",
          k: "üÖ∫",
          l: "üÖª",
          m: "üÖº",
          n: "üÖΩ",
          o: "üÖæ",
          p: "üÖø",
          q: "üÜÄ",
          r: "üÜÅ",
          s: "üÜÇ",
          t: "üÜÉ",
          u: "üÜÑ",
          v: "üÜÖ",
          w: "üÜÜ",
          x: "üÜá",
          y: "üÜà",
          z: "üÜâ",
          A: "üÖ∞",
          B: "üÖ±",
          C: "üÖ≤",
          D: "üÖ≥",
          E: "üÖ¥",
          F: "üÖµ",
          G: "üÖ∂",
          H: "üÖ∑",
          I: "üÖ∏",
          J: "üÖπ",
          K: "üÖ∫",
          L: "üÖª",
          M: "üÖº",
          N: "üÖΩ",
          O: "üÖæ",
          P: "üÖø",
          Q: "üÜÄ",
          R: "üÜÅ",
          S: "üÜÇ",
          T: "üÜÉ",
          U: "üÜÑ",
          V: "üÜÖ",
          W: "üÜÜ",
          X: "üÜá",
          Y: "üÜà",
          Z: "üÜâ",
        }
        return blackSquareMap[char] || char
      }),
  },
  {
    name: "Stelle",
    category: "divertenti",
    transform: (text: string) => `‚ú®${text.split("").join("‚≠ê")}‚ú®`,
  },
  {
    name: "Cuori",
    category: "divertenti",
    transform: (text: string) => `üíñ${text.split("").join("üíï")}üíñ`,
  },
  {
    name: "Fiori",
    category: "divertenti",
    transform: (text: string) => `üå∏${text.split("").join("üå∫")}üå∏`,
  },
  {
    name: "Arcobaleno",
    category: "divertenti",
    transform: (text: string) => `üåà${text}üåà`,
  },
  {
    name: "Fuoco",
    category: "divertenti",
    transform: (text: string) => `üî•${text}üî•`,
  },
  {
    name: "Diamanti",
    category: "divertenti",
    transform: (text: string) => `üíé${text.split("").join("‚ú®")}üíé`,
  },
  {
    name: "Onde",
    category: "divertenti",
    transform: (text: string) => `„Ä∞Ô∏è${text}„Ä∞Ô∏è`,
  },
  {
    name: "Zigzag",
    category: "divertenti",
    transform: (text: string) => text.split("").join("„Ä∞"),
  },
  {
    name: "Parentesi Carine",
    category: "divertenti",
    transform: (text: string) => `(‚óï‚Äø‚óï) ${text} (‚óï‚Äø‚óï)`,
  },
  {
    name: "Kawaii",
    category: "divertenti",
    transform: (text: string) => `(ÔΩ°‚óï‚Äø‚óïÔΩ°) ${text} (ÔΩ°‚óï‚Äø‚óïÔΩ°)`,
  },
  {
    name: "Faccine",
    category: "divertenti",
    transform: (text: string) => `(‚ó° ‚Äø ‚ó°) ${text} (‚ó° ‚Äø ‚ó°)`,
  },
  {
    name: "Bolle Doppie",
    category: "divertenti",
    transform: (text: string) => `‚óâ${text.split("").join("‚óé")}‚óâ`,
  },

  // Gotici (10 fonts)
  {
    name: "Gotico",
    category: "gotici",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const gothicMap: { [key: string]: string } = {
          a: "ùîû",
          b: "ùîü",
          c: "ùî†",
          d: "ùî°",
          e: "ùî¢",
          f: "ùî£",
          g: "ùî§",
          h: "ùî•",
          i: "ùî¶",
          j: "ùîß",
          k: "ùî®",
          l: "ùî©",
          m: "ùî™",
          n: "ùî´",
          o: "ùî¨",
          p: "ùî≠",
          q: "ùîÆ",
          r: "ùîØ",
          s: "ùî∞",
          t: "ùî±",
          u: "ùî≤",
          v: "ùî≥",
          w: "ùî¥",
          x: "ùîµ",
          y: "ùî∂",
          z: "ùî∑",
          A: "ùîÑ",
          B: "ùîÖ",
          C: "‚Ñ≠",
          D: "ùîá",
          E: "ùîà",
          F: "ùîâ",
          G: "ùîä",
          H: "‚Ñå",
          I: "‚Ñë",
          J: "ùîç",
          K: "ùîé",
          L: "ùîè",
          M: "ùîê",
          N: "ùîë",
          O: "ùîí",
          P: "ùîì",
          Q: "ùîî",
          R: "‚Ñú",
          S: "ùîñ",
          T: "ùîó",
          U: "ùîò",
          V: "ùîô",
          W: "ùîö",
          X: "ùîõ",
          Y: "ùîú",
          Z: "‚Ñ®",
        }
        return gothicMap[char] || char
      }),
  },
  {
    name: "Gotico Grassetto",
    category: "gotici",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const gothicBoldMap: { [key: string]: string } = {
          a: "ùñÜ",
          b: "ùñá",
          c: "ùñà",
          d: "ùñâ",
          e: "ùñä",
          f: "ùñã",
          g: "ùñå",
          h: "ùñç",
          i: "ùñé",
          j: "ùñè",
          k: "ùñê",
          l: "ùñë",
          m: "ùñí",
          n: "ùñì",
          o: "ùñî",
          p: "ùñï",
          q: "ùññ",
          r: "ùñó",
          s: "ùñò",
          t: "ùñô",
          u: "ùñö",
          v: "ùñõ",
          w: "ùñú",
          x: "ùñù",
          y: "ùñû",
          z: "ùñü",
          A: "ùï¨",
          B: "ùï≠",
          C: "ùïÆ",
          D: "ùïØ",
          E: "ùï∞",
          F: "ùï±",
          G: "ùï≤",
          H: "ùï≥",
          I: "ùï¥",
          J: "ùïµ",
          K: "ùï∂",
          L: "ùï∑",
          M: "ùï∏",
          N: "ùïπ",
          O: "ùï∫",
          P: "ùïª",
          Q: "ùïº",
          R: "ùïΩ",
          S: "ùïæ",
          T: "ùïø",
          U: "ùñÄ",
          V: "ùñÅ",
          W: "ùñÇ",
          X: "ùñÉ",
          Y: "ùñÑ",
          Z: "ùñÖ",
        }
        return gothicBoldMap[char] || char
      }),
  },
  {
    name: "Medievale",
    category: "gotici",
    transform: (text: string) => `‚öîÔ∏è${text}‚öîÔ∏è`,
  },
  {
    name: "Runico",
    category: "gotici",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const runicMap: { [key: string]: string } = {
          a: "·ö®",
          b: "·õí",
          c: "·ö≤",
          d: "·õû",
          e: "·õñ",
          f: "·ö†",
          g: "·ö∑",
          h: "·ö∫",
          i: "·õÅ",
          j: "·õÉ",
          k: "·ö≤",
          l: "·õö",
          m: "·õó",
          n: "·öæ",
          o: "·õü",
          p: "·õà",
          q: "·ö≤",
          r: "·ö±",
          s: "·õä",
          t: "·õè",
          u: "·ö¢",
          v: "·ö¢",
          w: "·öπ",
          x: "·ö≤·õä",
          y: "·õÉ",
          z: "·õâ",
          A: "·ö®",
          B: "·õí",
          C: "·ö≤",
          D: "·õû",
          E: "·õñ",
          F: "·ö†",
          G: "·ö∑",
          H: "·ö∫",
          I: "·õÅ",
          J: "·õÉ",
          K: "·ö≤",
          L: "·õö",
          M: "·õó",
          N: "·öæ",
          O: "·õü",
          P: "·õà",
          Q: "·ö≤",
          R: "·ö±",
          S: "·õä",
          T: "·õè",
          U: "·ö¢",
          v: "·ö¢",
          W: "·öπ",
          X: "·ö≤·õä",
          Y: "·õÉ",
          Z: "·õâ",
        }
        return runicMap[char] || char
      }),
  },
  {
    name: "Teschi",
    category: "gotici",
    transform: (text: string) => `üíÄ${text}üíÄ`,
  },
  {
    name: "Spade",
    category: "gotici",
    transform: (text: string) => `‚öîÔ∏è${text.split("").join("üó°Ô∏è")}‚öîÔ∏è`,
  },
  {
    name: "Catene",
    category: "gotici",
    transform: (text: string) => `‚õìÔ∏è${text}‚õìÔ∏è`,
  },
  {
    name: "Cornici Gotiche",
    category: "gotici",
    transform: (text: string) => `„Äê${text}„Äë`,
  },
  {
    name: "Parentesi Gotiche",
    category: "gotici",
    transform: (text: string) => `„Äñ${text}„Äó`,
  },
  {
    name: "Bordi Scuri",
    category: "gotici",
    transform: (text: string) => `‚ñì${text}‚ñì`,
  },

  // Speciali (15 fonts)
  {
    name: "Sottosopra",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .reverse()
        .map((char) => {
          const upsideDownMap: { [key: string]: string } = {
            a: "…ê",
            b: "q",
            c: "…î",
            d: "p",
            e: "«ù",
            f: "…ü",
            g: "∆É",
            h: "…•",
            i: "·¥â",
            j: "…æ",
            k: " û",
            l: "l",
            m: "…Ø",
            n: "u",
            o: "o",
            p: "d",
            q: "b",
            r: "…π",
            s: "s",
            t: " á",
            u: "n",
            v: " å",
            w: " ç",
            x: "x",
            y: " é",
            z: "z",
            " ": " ",
            A: "‚àÄ",
            B: "·ó∫",
            C: "∆Ü",
            D: "·ó°",
            E: "∆é",
            F: "·ñ¥",
            G: "◊§",
            H: "H",
            I: "I",
            J: "≈ø",
            K: " û",
            L: "À•",
            M: "W",
            N: "N",
            O: "O",
            P: "‘Ä",
            Q: "Q",
            R: "·¥ø",
            S: "S",
            T: "‚î¥",
            U: "‚à©",
            V: "Œõ",
            W: "M",
            X: "X",
            Y: "‚ÖÑ",
            Z: "Z",
          }
          return upsideDownMap[char.toLowerCase()] || char
        })
        .join(""),
  },
  {
    name: "Spazi Larghi",
    category: "speciali",
    transform: (text: string) => text.split("").join(" "),
  },
  {
    name: "Spazi Extra Larghi",
    category: "speciali",
    transform: (text: string) => text.split("").join("  "),
  },
  {
    name: "Zalgo Leggero",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "ÃÉ")
        .join(""),
  },
  {
    name: "Zalgo Medio",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "ÃÉ" + "ÃÇ")
        .join(""),
  },
  {
    name: "Zalgo Pesante",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "ÃÉ" + "ÃÇ" + "Ãå")
        .join(""),
  },
  {
    name: "Specchiato",
    category: "speciali",
    transform: (text: string) =>
      text.replace(/[a-zA-Z]/g, (char) => {
        const mirrorMap: { [key: string]: string } = {
          a: "…í",
          b: "d",
          c: "…î",
          d: "b",
          e: "…ò",
          f: " á",
          g: "«´",
          h: " ú",
          i: "i",
          j: "ÍûÅ",
          k: " û",
          l: "l",
          m: "m",
          n: "n",
          o: "o",
          p: "q",
          q: "p",
          r: "…ø",
          s: "∆®",
          t: "∆ö",
          u: "u",
          v: "v",
          w: "w",
          x: "x",
          y: " è",
          z: "∆π",
          A: "A",
          B: "·ó∫",
          C: "∆Ü",
          D: "·ó°",
          E: "∆é",
          F: "·ñ¥",
          G: "”ò",
          H: "H",
          I: "I",
          J: "·Ç±",
          K: " û",
          L: "‚ÖÉ",
          M: "M",
          N: "N",
          O: "O",
          P: "‘≥",
          Q: "Œå",
          R: "–Ø",
          S: "∆ß",
          T: "T",
          U: "U",
          V: "V",
          W: "W",
          X: "X",
          Y: "Y",
          Z: "∆∏",
        }
        return mirrorMap[char] || char
      }),
  },
  {
    name: "Barrato",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u0336")
        .join(""),
  },
  {
    name: "Doppio Barrato",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u0336" + "\u0336")
        .join(""),
  },
  {
    name: "Cerchiato",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u20DD")
        .join(""),
  },
  {
    name: "Quadrato Cerchiato",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u20DE")
        .join(""),
  },
  {
    name: "Diamante Cerchiato",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char) => char + "\u20DF")
        .join(""),
  },
  {
    name: "Glitch",
    category: "speciali",
    transform: (text: string) =>
      text
        .split("")
        .map((char, i) => {
          const glitchChars = ["Ã∏", "Ãµ", "Ã∂", "Ã∑", "Ã¥"]
          return char + glitchChars[i % glitchChars.length]
        })
        .join(""),
  },
  {
    name: "Aesthetic Vaporwave",
    category: "speciali",
    transform: (text: string) => `„Äê${text.toUpperCase()}„Äë`,
  },
  {
    name: "Cyberpunk",
    category: "speciali",
    transform: (text: string) => `‚ñì‚ñí‚ñë${text.toUpperCase()}‚ñë‚ñí‚ñì`,
  },
]

const categories = [
  {
    id: "tutti",
    name: "Tutti",
    description: "Tutti i font disponibili",
    icon: "üé®",
    count: fontStyles.length,
  },
  {
    id: "eleganti",
    name: "Eleganti",
    description: "Font sofisticati per un look raffinato",
    icon: "‚ú®",
    count: fontStyles.filter((f) => f.category === "eleganti").length,
  },
  {
    id: "moderni",
    name: "Moderni",
    description: "Stili contemporanei e minimalisti",
    icon: "üî•",
    count: fontStyles.filter((f) => f.category === "moderni").length,
  },
  {
    id: "divertenti",
    name: "Divertenti",
    description: "Font giocosi e creativi",
    icon: "üéâ",
    count: fontStyles.filter((f) => f.category === "divertenti").length,
  },
  {
    id: "gotici",
    name: "Gotici",
    description: "Stili medievali e misteriosi",
    icon: "‚öîÔ∏è",
    count: fontStyles.filter((f) => f.category === "gotici").length,
  },
  {
    id: "speciali",
    name: "Speciali",
    description: "Effetti unici e trasformazioni creative",
    icon: "üåü",
    count: fontStyles.filter((f) => f.category === "speciali").length,
  },
]

export default function FontGenerator() {
  const [inputText, setInputText] = useState("FontInsta.org")
  const [selectedCategory, setSelectedCategory] = useState("tutti")
  const [favorites, setFavorites] = useState<string[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [visibleFonts, setVisibleFonts] = useState(12)
  const [previewModal, setPreviewModal] = useState({
    isOpen: false,
    transformedText: "",
    fontName: "",
  })

  const [isMobile, setIsMobile] = useState(false)
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState("")
  const [copiedFont, setCopiedFont] = useState<string | null>(null)

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768)
    }
    checkMobile()
    window.addEventListener("resize", checkMobile)
    return () => window.removeEventListener("resize", checkMobile)
  }, [])

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery)
    }, 300)
    return () => clearTimeout(timer)
  }, [searchQuery])

  const { toast } = useToast()
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedFont, setSelectedFont] = useState("")

  const fontTransformCache = useMemo(() => {
    const cache = new Map<string, string>()
    const maxSize = isMobile ? 50 : 100 // Smaller cache on mobile

    return {
      get: (key: string) => cache.get(key),
      set: (key: string, value: string) => {
        if (cache.size >= maxSize) {
          const firstKey = cache.keys().next().value
          cache.delete(firstKey)
        }
        cache.set(key, value)
      },
      has: (key: string) => cache.has(key),
      clear: () => cache.clear(),
    }
  }, [isMobile])

  const getTransformedText = useCallback(
    (font: (typeof fontStyles)[0], text: string) => {
      const cacheKey = `${font.name}-${text}`
      if (fontTransformCache.has(cacheKey)) {
        return fontTransformCache.get(cacheKey)!
      }

      const transformed = font.transform(text)
      fontTransformCache.set(cacheKey, transformed)
      return transformed
    },
    [fontTransformCache],
  )

  // Load favorites from localStorage
  useEffect(() => {
    const savedFavorites = localStorage.getItem("fontinsta-favorites")
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites))
    }
  }, [])

  const toggleFavorite = useCallback(
    (fontName: string) => {
      const newFavorites = favorites.includes(fontName)
        ? favorites.filter((f) => f !== fontName)
        : [...favorites, fontName]

      setFavorites(newFavorites)
      localStorage.setItem("fontinsta-favorites", JSON.stringify(newFavorites))
    },
    [favorites],
  )

  const copyToClipboard = useCallback(
    async (text: string, fontName: string) => {
      try {
        // First try modern clipboard API
        if (navigator.clipboard && window.isSecureContext) {
          await navigator.clipboard.writeText(text)
        } else {
          // Mobile-optimized fallback
          const textArea = document.createElement("textarea")
          textArea.value = text
          textArea.style.position = "absolute"
          textArea.style.left = "-9999px"
          textArea.style.top = "0"
          textArea.style.opacity = "0"
          textArea.setAttribute("readonly", "")
          textArea.style.fontSize = "16px" // Prevent zoom on iOS
          document.body.appendChild(textArea)

          // Focus and select for mobile
          textArea.focus()
          textArea.setSelectionRange(0, text.length)

          // Try to copy
          let successful = false
          try {
            successful = document.execCommand("copy")
          } catch (err) {
            console.log("execCommand failed:", err)
          }

          document.body.removeChild(textArea)

          if (!successful) {
            // Final fallback - show text for manual copy
            const modal = document.createElement("div")
            modal.style.cssText = `
              position: fixed;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              background: white;
              padding: 20px;
              border-radius: 8px;
              box-shadow: 0 4px 20px rgba(0,0,0,0.3);
              z-index: 10000;
              max-width: 90vw;
              text-align: center;
            `
            modal.innerHTML = `
              <p style="margin-bottom: 10px; font-weight: bold;">Copia questo testo:</p>
              <textarea readonly style="width: 100%; padding: 10px; font-size: 16px; border: 1px solid #ccc; border-radius: 4px;">${text}</textarea>
              <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 8px 16px; background: #f59e0b; color: white; border: none; border-radius: 4px;">Chiudi</button>
            `
            document.body.appendChild(modal)

            // Auto-select text in the modal
            const textarea = modal.querySelector("textarea") as HTMLTextAreaElement
            textarea.focus()
            textarea.select()

            setTimeout(() => {
              if (modal.parentElement) {
                modal.remove()
              }
            }, 10000)

            toast({
              description: "Seleziona e copia il testo dalla finestra popup",
              duration: 5000,
            })
            return
          }
        }

        setCopiedFont(fontName)
        toast({
          description: "Font per Instagram copiato! Incollalo su Instagram.",
          duration: 2000,
        })
        setTimeout(() => setCopiedFont(null), 2500)
      } catch (err) {
        console.error("Failed to copy font per Instagram: ", err)
        toast({
          description: "Errore nella copia. Usa il popup per copiare manualmente.",
          variant: "destructive",
          duration: 3000,
        })
      }
    },
    [isMobile, toast],
  )

  const getRandomFont = useCallback(() => {
    const randomFont = fontStyles[Math.floor(Math.random() * fontStyles.length)]
    const transformedText = getTransformedText(randomFont, inputText)
    copyToClipboard(transformedText, randomFont.name)
  }, [inputText, getTransformedText, copyToClipboard])

  const openInstagramPreview = useCallback((transformedText: string, fontName: string) => {
    setPreviewModal({
      isOpen: true,
      transformedText,
      fontName,
    })
  }, [])

  const closeInstagramPreview = useCallback(() => {
    setPreviewModal({
      isOpen: false,
      transformedText: "",
      fontName: "",
    })
  }, [])

  const filteredAndSearchedFonts = useMemo(() => {
    let filtered =
      selectedCategory === "tutti" ? fontStyles : fontStyles.filter((font) => font.category === selectedCategory)

    if (debouncedSearchQuery.trim()) {
      const query = debouncedSearchQuery.toLowerCase().trim()
      filtered = filtered.filter(
        (font) =>
          font.name.toLowerCase().includes(query) ||
          font.category.toLowerCase().includes(query) ||
          categories
            .find((c) => c.id === font.category)
            ?.name.toLowerCase()
            .includes(query),
      )
    }

    return filtered
  }, [selectedCategory, debouncedSearchQuery])

  // Sort fonts (favorites first)
  const sortedFonts = useMemo(() => {
    return [...filteredAndSearchedFonts].sort((a, b) => {
      const aIsFavorite = favorites.includes(a.name)
      const bIsFavorite = favorites.includes(b.name)
      if (aIsFavorite && !bIsFavorite) return -1
      if (!aIsFavorite && bIsFavorite) return 1
      return 0
    })
  }, [filteredAndSearchedFonts, favorites])

  const displayedFonts = useMemo(() => {
    const mobileLimit = isMobile ? Math.min(visibleFonts, 8) : visibleFonts
    return sortedFonts.slice(0, mobileLimit)
  }, [sortedFonts, visibleFonts, isMobile])

  const hasMoreFonts = sortedFonts.length > displayedFonts.length

  const loadMoreFonts = useCallback(() => {
    const increment = isMobile ? 6 : 12
    setVisibleFonts((prev) => prev + increment)
  }, [isMobile])

  useEffect(() => {
    setVisibleFonts(30)
  }, [selectedCategory, searchQuery])

  useEffect(() => {
    fontTransformCache.clear()
  }, [inputText, fontTransformCache])

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-3 md:py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 md:gap-3">
              <div className="flex items-center gap-2">
                <img
                  src="/android-chrome-192x192.png"
                  alt="FontInsta.org Logo"
                  className="w-7 h-7 md:w-10 md:h-10"
                  loading="eager"
                  decoding="async"
                />
                <h1 className="text-lg md:text-2xl font-bold text-primary">FontInsta.org</h1>
              </div>
              <Badge variant="secondary" className="text-xs hidden sm:inline-flex">
                GRATUITO
              </Badge>
            </div>
            <Link href="/chi-siamo" className="text-sm md:text-base hover:text-primary transition-colors">
              Chi Siamo
            </Link>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-6 md:py-8 max-w-4xl">
        {/* Hero Section */}
        <div className="text-center mb-6 md:mb-8">
          <h1 className="text-2xl md:text-4xl font-bold text-balance mb-3 md:mb-4">
            Font per Instagram: Generatore Gratuito di Caratteri Speciali
          </h1>
          <p className="text-base md:text-lg text-muted-foreground text-pretty">
            Crea font per Instagram unici e accattivanti. Il miglior generatore di font per Instagram in italiano -
            copia e incolla facilmente oltre 70 stili diversi.
          </p>
        </div>

        {/* Input Section */}
        <Card className="p-4 md:p-6 mb-6 md:mb-8">
          <div className="space-y-4">
            <div>
              <Label htmlFor="input-text" className="text-sm md:text-base font-medium">
                Inserisci il tuo testo per generare font per Instagram
              </Label>
              <Textarea
                id="input-text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                className="mt-2 min-h-[80px] md:min-h-[100px] text-base md:text-lg"
                placeholder="Scrivi qui il testo che vuoi trasformare con i nostri font per Instagram..."
                style={{ fontSize: "16px" }} // Prevent zoom on iOS
                autoComplete="off"
                autoCorrect="off"
                autoCapitalize="off"
                spellCheck="false"
              />
            </div>

            <div className="flex flex-col sm:flex-row gap-2">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                <Input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                  placeholder="Cerca font per Instagram..."
                  style={{ fontSize: "16px" }} // Prevent zoom on iOS
                  autoComplete="off"
                  autoCorrect="off"
                  autoCapitalize="off"
                  spellCheck="false"
                />
              </div>
              <Button
                onClick={getRandomFont}
                variant="outline"
                size="default"
                className="flex items-center gap-2 whitespace-nowrap bg-transparent"
              >
                <Shuffle className="h-4 w-4" />
                <span className="hidden sm:inline">Font Casuale</span>
                <span className="sm:hidden">Casuale</span>
              </Button>
            </div>
          </div>
        </Card>

        <div className="space-y-4 mb-6 md:mb-8">
          {/* Category Filter with Enhanced UI */}
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Filter className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm font-medium text-muted-foreground">Filtra per categoria:</span>
            </div>
            <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 md:gap-3">
              {categories.map((category) => (
                <Button
                  key={category.id}
                  variant={selectedCategory === category.id ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(category.id)}
                  className="flex flex-col items-center gap-1 h-auto py-2 md:py-3 text-xs"
                  title={category.description}
                >
                  <span className="text-base md:text-lg">{category.icon}</span>
                  <span className="font-medium text-xs">{category.name}</span>
                  <span className="text-xs opacity-70">({category.count})</span>
                </Button>
              ))}
            </div>
          </div>

          {/* Results Summary */}
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <span>
              {debouncedSearchQuery ? (
                <>
                  {filteredAndSearchedFonts.length} font per Instagram trovati per "{debouncedSearchQuery}"
                </>
              ) : (
                <>
                  {filteredAndSearchedFonts.length} font per Instagram disponibili
                  {selectedCategory !== "tutti" && (
                    <> nella categoria {categories.find((c) => c.id === selectedCategory)?.name}</>
                  )}
                </>
              )}
            </span>
            {favorites.length > 0 && (
              <span className="flex items-center gap-1">
                <Heart className="h-3 w-3 fill-current text-red-500" />
                {favorites.length} preferiti
              </span>
            )}
          </div>
        </div>

        {/* Font Grid */}
        {filteredAndSearchedFonts.length === 0 ? (
          <Card className="p-8 text-center">
            <p className="text-muted-foreground mb-4">Nessun font per Instagram trovato per "{debouncedSearchQuery}"</p>
            <Button onClick={() => setSearchQuery("")} variant="outline">
              Mostra tutti i font per Instagram
            </Button>
          </Card>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mb-6 md:mb-8">
              {displayedFonts.map((font) => {
                const transformedText = getTransformedText(font, inputText)
                const isFavorite = favorites.includes(font.name)

                return (
                  <Card key={font.name} className="p-4 md:p-6 hover:shadow-md transition-all duration-200">
                    <div className="space-y-3 md:space-y-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <h3 className="font-medium text-sm md:text-base">{font.name}</h3>
                          <Badge variant="outline" className="text-xs">
                            {categories.find((c) => c.id === font.category)?.name}
                          </Badge>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleFavorite(font.name)}
                          className="h-8 w-8 p-0"
                        >
                          <Heart
                            className={`h-4 w-4 ${isFavorite ? "fill-current text-red-500" : "text-muted-foreground"}`}
                          />
                        </Button>
                      </div>

                      <div className="bg-muted/50 rounded-lg p-3 md:p-4 min-h-[60px] md:min-h-[80px] flex items-center">
                        <p
                          className="text-lg md:text-xl font-medium break-all leading-relaxed w-full text-center"
                          style={{ wordBreak: "break-word" }}
                        >
                          {transformedText}
                        </p>
                      </div>

                      <div className="flex gap-2">
                        <Button
                          onClick={() => copyToClipboard(transformedText, font.name)}
                          className="flex-1 text-sm hover:bg-amber-600 active:bg-amber-700 transition-colors touch-manipulation"
                          size="sm"
                          style={{ minHeight: "44px" }} // Better touch target
                          onTouchStart={(e) => {
                            e.currentTarget.style.transform = "scale(0.95)"
                            e.currentTarget.style.backgroundColor = "#d97706"
                          }}
                          onTouchEnd={(e) => {
                            e.currentTarget.style.transform = "scale(1)"
                            e.currentTarget.style.backgroundColor = ""
                          }}
                        >
                          <Copy className="h-4 w-4 mr-2" />
                          {copiedFont === font.name ? "Copiato!" : "Copia"}
                        </Button>
                        <Button
                          onClick={() =>
                            setPreviewModal({
                              isOpen: true,
                              transformedText: transformedText,
                              fontName: font.name,
                            })
                          }
                          variant="outline"
                          size="sm"
                          className="hover:bg-amber-50 active:bg-amber-100 transition-colors touch-manipulation"
                          style={{ minHeight: "44px" }} // Better touch target
                          onTouchStart={(e) => {
                            e.currentTarget.style.transform = "scale(0.95)"
                          }}
                          onTouchEnd={(e) => {
                            e.currentTarget.style.transform = "scale(1)"
                          }}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button
                          onClick={() => toggleFavorite(font.name)}
                          variant="ghost"
                          size="sm"
                          className="hover:bg-red-50 active:bg-red-100 transition-colors"
                          onTouchStart={(e) => {
                            e.currentTarget.style.transform = "scale(0.95)"
                          }}
                          onTouchEnd={(e) => {
                            e.currentTarget.style.transform = "scale(1)"
                          }}
                        >
                          <Heart
                            className={`h-4 w-4 ${
                              favorites.includes(font.name) ? "fill-red-500 text-red-500" : "text-gray-400"
                            }`}
                          />
                        </Button>
                      </div>
                    </div>
                  </Card>
                )
              })}
            </div>

            {/* Load More Button */}
            {hasMoreFonts && (
              <div className="text-center">
                <Button onClick={loadMoreFonts} variant="outline" size="lg" className="w-full md:w-auto bg-transparent">
                  Carica altri font per Instagram ({sortedFonts.length - displayedFonts.length} rimanenti)
                </Button>
              </div>
            )}
          </>
        )}

        {/* Why Choose Us Section */}
        <section className="py-12 md:py-16 bg-muted/30 rounded-lg mb-12 md:mb-16">
          <div className="text-center mb-8 md:mb-12">
            <h2 className="text-2xl md:text-3xl font-bold mb-3 md:mb-4">
              Perch√© Scegliere FontInsta per i Tuoi Font per Instagram?
            </h2>
            <p className="text-base md:text-lg text-muted-foreground max-w-2xl mx-auto">
              FontInsta.org √® il generatore di font per Instagram pi√π completo e veloce d'Italia. Oltre 70 font per
              Instagram gratuiti sempre disponibili.
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-4 md:gap-6">
            <Card className="p-4 md:p-6 text-center">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3 md:mb-4">
                <Zap className="h-5 w-5 md:h-6 md:w-6 text-primary" />
              </div>
              <h3 className="text-lg md:text-xl font-semibold mb-2">Font per Instagram Istantanei</h3>
              <p className="text-muted-foreground">
                Genera font per Instagram in millisecondi. Il nostro algoritmo avanzato trasforma il tuo testo
                istantaneamente senza lag o attese.
              </p>
            </Card>

            <Card className="p-4 md:p-6 text-center">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3 md:mb-4">
                <Eye className="h-5 w-5 md:h-6 md:w-6 text-primary" />
              </div>
              <h3 className="text-lg md:text-xl font-semibold mb-2">Anteprima Instagram Realistica</h3>
              <p className="text-muted-foreground">
                Visualizza esattamente come appariranno i tuoi font per Instagram nel feed, nelle storie e nella bio.
                Anteprima pixel-perfect garantita.
              </p>
            </Card>

            <Card className="p-4 md:p-6 text-center">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3 md:mb-4">
                <Heart className="h-5 w-5 md:h-6 md:w-6 text-primary" />
              </div>
              <h3 className="text-lg md:text-xl font-semibold mb-2">70+ Font per Instagram</h3>
              <p className="text-muted-foreground">
                La pi√π vasta collezione di font per Instagram in italiano: eleganti, moderni, divertenti, gotici e
                speciali. Sempre aggiornata con nuovi stili.
              </p>
            </Card>
          </div>
        </section>

        {/* How It Works Section */}
        <section className="py-12 md:py-16 mb-12 md:mb-16">
          <div className="text-center mb-8 md:mb-12">
            <h2 className="text-2xl md:text-3xl font-bold mb-3 md:mb-4">
              Come Creare Font per Instagram in 4 Semplici Passi
            </h2>
            <p className="text-base md:text-lg text-muted-foreground max-w-2xl mx-auto">
              Trasforma il tuo testo in font per Instagram accattivanti seguendo questi semplici passaggi
            </p>
          </div>

          <div className="grid md:grid-cols-4 gap-4 md:gap-6">
            <div className="text-center">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center mx-auto mb-3 md:mb-4 font-bold text-lg">
                1
              </div>
              <h3 className="font-semibold mb-2">Scrivi il Testo</h3>
              <p className="text-sm text-muted-foreground">
                Inserisci il testo che vuoi trasformare nella casella di input
              </p>
            </div>

            <div className="text-center">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center mx-auto mb-3 md:mb-4 font-bold text-lg">
                2
              </div>
              <h3 className="font-semibold mb-2">Scegli il Font</h3>
              <p className="text-sm text-muted-foreground">
                Naviga tra oltre 70 font diversi organizzati per categoria
              </p>
            </div>

            <div className="text-center">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center mx-auto mb-3 md:mb-4 font-bold text-lg">
                3
              </div>
              <h3 className="font-semibold mb-2">Anteprima</h3>
              <p className="text-sm text-muted-foreground">
                Visualizza come apparir√† su Instagram con la nostra anteprima
              </p>
            </div>

            <div className="text-center">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center mx-auto mb-3 md:mb-4 font-bold text-lg">
                4
              </div>
              <h3 className="font-semibold mb-2">Copia e Incolla</h3>
              <p className="text-sm text-muted-foreground">Copia il testo trasformato e incollalo su Instagram</p>
            </div>
          </div>
        </section>

        {/* FAQ Section */}
        <section className="py-12 md:py-16 mb-12 md:mb-16">
          <div className="text-center mb-8 md:mb-12">
            <h2 className="text-2xl md:text-3xl font-bold mb-3 md:mb-4">Domande Frequenti sui Font per Instagram</h2>
            <p className="text-base md:text-lg text-muted-foreground max-w-2xl mx-auto">
              Tutto quello che devi sapere sui font per Instagram e come utilizzarli al meglio
            </p>
          </div>

          <div className="max-w-3xl mx-auto space-y-4">
            <Card className="p-4 md:p-6">
              <h3 className="font-semibold mb-2">I font per Instagram funzionano su tutti i dispositivi?</h3>
              <p className="text-muted-foreground">
                S√¨, tutti i nostri font per Instagram utilizzano caratteri Unicode standard che funzionano perfettamente
                su iPhone, Android, computer e tablet. Compatibilit√† garantita al 100%.
              </p>
            </Card>

            <Card className="p-4 md:p-6">
              <h3 className="font-semibold mb-2">Posso usare questi font per Instagram su altre piattaforme?</h3>
              <p className="text-muted-foreground">
                Assolutamente! I font per Instagram generati da FontInsta funzionano anche su Facebook, Twitter, TikTok,
                WhatsApp e qualsiasi piattaforma che supporta Unicode.
              </p>
            </Card>

            <Card className="p-4 md:p-6">
              <h3 className="font-semibold mb-2">Quanti font per Instagram posso generare gratuitamente?</h3>
              <p className="text-muted-foreground">
                Illimitati! FontInsta.org offre accesso gratuito e illimitato a tutti i 70+ font per Instagram. Nessuna
                registrazione richiesta, nessun limite di utilizzo.
              </p>
            </Card>

            <Card className="p-4 md:p-6">
              <h3 className="font-semibold mb-2">I font per Instagram influenzano l'algoritmo?</h3>
              <p className="text-muted-foreground">
                I font per Instagram creativi possono aumentare significativamente l'engagement dei tuoi post,
                aiutandoti a distinguerti nel feed e attirare pi√π like e commenti.
              </p>
            </Card>

            <Card className="p-4 md:p-6">
              <h3 className="font-semibold mb-2">Come scegliere i migliori font per Instagram?</h3>
              <p className="text-muted-foreground">
                Scegli font per Instagram che riflettano la tua personalit√†: eleganti per brand professionali,
                divertenti per contenuti casual, gotici per temi dark. Usa la nostra anteprima per decidere.
              </p>
            </Card>
          </div>
        </section>
      </main>

      <InstagramPreviewModal
        isOpen={previewModal.isOpen}
        onClose={closeInstagramPreview}
        transformedText={previewModal.transformedText}
        fontName={previewModal.fontName}
      />

      {/* Footer */}
      <footer className="border-t border-border bg-card/50 mt-12 md:mt-16">
        <div className="container mx-auto px-4 py-6 md:py-8">
          <div className="text-center text-sm text-muted-foreground">
            <p>¬© 2025 FontInsta.org - Il miglior generatore di font per Instagram gratuito in italiano</p>
            <div className="flex flex-wrap justify-center gap-4 mt-4">
              <Link href="/chi-siamo" className="hover:text-primary transition-colors">
                Chi Siamo
              </Link>
              <Link href="/contattaci" className="hover:text-primary transition-colors">
                Contattaci
              </Link>
              <Link href="/privacy" className="hover:text-primary transition-colors">
                Privacy Policy
              </Link>
              <Link href="/termini" className="hover:text-primary transition-colors">
                Termini di Servizio
              </Link>
            </div>
            <div className="mt-4 text-xs">
              <p>
                Font per Instagram ‚Ä¢ Generatore caratteri speciali ‚Ä¢ Copia e incolla ‚Ä¢ 70+ stili gratuiti ‚Ä¢ Unicode
                compatibile
              </p>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}
